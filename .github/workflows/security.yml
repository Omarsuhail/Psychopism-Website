name: 🔒 Security & Maintenance

on:
  schedule:
    # Run security checks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/security.yml'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔒 Run Security Audit
      run: |
        echo "🔍 Running npm security audit..."
        npm audit --audit-level=moderate || {
          echo "⚠️ Security vulnerabilities found!"
          echo "📋 Detailed audit report:"
          npm audit --json > audit-report.json
          cat audit-report.json
          exit 1
        }
        
    - name: 📊 Dependency Analysis
      run: |
        echo "📦 Dependency Analysis:"
        echo "📈 Total dependencies: $(npm list --depth=0 2>/dev/null | grep -c '├\|└' || echo '0')"
        echo "🔍 Outdated packages:"
        npm outdated || echo "✅ All packages are up to date"
        
    - name: 🧹 License Check
      run: |
        echo "📄 License compliance check:"
        echo "🔍 Checking package licenses..."
        npm list --depth=0 2>/dev/null | grep -E 'MIT|ISC|BSD|Apache' || echo "⚠️ Non-standard licenses found"
        
    - name: 📁 File Security Scan
      run: |
        echo "🔍 File security scan:"
        echo "🚫 Checking for sensitive files..."
        # Check for common sensitive file patterns
        find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" | head -10
        echo "🔒 Checking for hardcoded secrets..."
        # Simple grep for common secret patterns
        grep -r -i "password\|secret\|token\|key" --include="*.js" --include="*.ts" src/ || echo "✅ No obvious secrets found"
        
    - name: 📋 Generate Security Report
      if: always()
      run: |
        echo "🛡️ Security Report Summary:"
        echo "📅 Scan Date: $(date)"
        echo "🔍 Scan Type: Automated Security Audit"
        echo "📊 Status: $(if [ $? -eq 0 ]; then echo 'PASSED'; else echo 'ISSUES_FOUND'; fi)"
        echo "📝 Next scheduled scan: Next Sunday 2 AM UTC"

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔄 Check for Updates
      id: updates
      run: |
        echo "🔍 Checking for available updates..."
        UPDATE_OUTPUT=$(npm outdated --json || echo '{}')
        echo "updates=$UPDATE_OUTPUT" >> $GITHUB_OUTPUT
        
        if [ "$UPDATE_OUTPUT" != "{}" ] && [ "$UPDATE_OUTPUT" != "" ]; then
          echo "🔄 Updates available!"
          echo "has_updates=true" >> $GITHUB_OUTPUT
        else
          echo "✅ All dependencies are up to date"
          echo "has_updates=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 📝 Create Update Report
      if: steps.updates.outputs.has_updates == 'true'
      run: |
        echo "📋 Dependency Update Report" > update-report.md
        echo "" >> update-report.md
        echo "The following dependencies have updates available:" >> update-report.md
        echo "" >> update-report.md
        npm outdated >> update-report.md || true
        echo "" >> update-report.md
        echo "⚠️ Please review and update these dependencies manually." >> update-report.md
        echo "📅 Report generated: $(date)" >> update-report.md
        
        echo "📄 Update report generated:"
        cat update-report.md

