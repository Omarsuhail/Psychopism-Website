name: 🎉 Release Management

on:
  push:
    tags:
      - 'v*.*.*'      # Semantic version tags (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*-*'    # Pre-release tags (v1.0.0-beta, v1.0.0-rc.1, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      discussions: write
      
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for changelog generation
        
    - name: 📍 Get Version Information
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.version }}"
          VERSION=$(echo $TAG_NAME | sed 's/^v//')
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=$(echo $TAG_NAME | sed 's/^v//')
          if [[ $TAG_NAME =~ -[a-zA-Z] ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "🏷️ Tag: $TAG_NAME"
        echo "🔢 Version: $VERSION"
        echo "🆕 Pre-release: $IS_PRERELEASE"
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔍 Install TypeScript
      run: npm install -g typescript
      
    - name: 🏠 Build Release
      run: |
        echo "🎉 Building release ${{ steps.get_version.outputs.tag_name }}..."
        chmod +x ./build.sh
        ./build.sh
        
    - name: 📝 Generate Changelog
      id: changelog
      run: |
        echo "📋 Generating changelog..."
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]' | head -2 | tail -1 || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "changelog=Initial release of Psychopism Website ${{ steps.get_version.outputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "🔄 Changes since $PREVIOUS_TAG:"
          
          # Generate changelog from commits
          CHANGELOG=$(git log $PREVIOUS_TAG..${{ steps.get_version.outputs.tag_name }} --pretty=format:"- %s (%h)" --reverse)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Minor updates and improvements"
          fi
          
          # Create formatted changelog
          cat > CHANGELOG.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        ## Technical Details
        
        - **Version**: ${{ steps.get_version.outputs.version }}
        - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Node.js**: $(node --version)
        - **TypeScript**: $(tsc --version | cut -d' ' -f2)
        - **Platform**: $(uname -s) $(uname -m)
        
        ## Installation
        
        1. Download the release assets
        2. Extract the files
        3. Open `index.html` in a web browser
        4. Or serve using: `python3 -m http.server 8000`
        
        ## Verification
        
        - ✅ TypeScript compilation successful
        - ✅ All static assets generated
        - ✅ Ready for deployment
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ steps.get_version.outputs.tag_name }}
        EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: 📦 Create Release Archive
      run: |
        echo "🗃️ Creating release archives..."
        
        # Create release directory
        mkdir -p release
        
        # Copy essential files for distribution
        cp index.html release/
        cp -r dist release/
        cp LICENSE release/
        cp README.md release/
        
        # Create build info
        cat > release/BUILD_INFO.txt << EOF
        Psychopism Website - Release ${{ steps.get_version.outputs.tag_name }}
        ================================================================
        
        Build Information:
        - Version: ${{ steps.get_version.outputs.version }}
        - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Git Commit: $(git rev-parse HEAD)
        - Node.js Version: $(node --version)
        - TypeScript Version: $(tsc --version)
        
        Included Files:
        - index.html - Main website entry point
        - dist/ - Compiled TypeScript and processed assets
        - LICENSE - MIT License
        - README.md - Project documentation
        
        Usage:
        1. Open index.html in a web browser, or
        2. Serve with: python3 -m http.server 8000
        3. Navigate to http://localhost:8000
        
        Project: https://github.com/${{ github.repository }}
        Website: https://psychopism.game
        EOF
        
        # Create ZIP archive
        cd release
        zip -r "../psychopism-website-${{ steps.get_version.outputs.tag_name }}.zip" .
        cd ..
        
        # Create TAR.GZ archive
        tar -czf "psychopism-website-${{ steps.get_version.outputs.tag_name }}.tar.gz" -C release .
        
        echo "📦 Archives created:"
        ls -lh *.zip *.tar.gz
        
    - name: 🎉 Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: 'Psychopism Website ${{ steps.get_version.outputs.tag_name }}'
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ steps.get_version.outputs.is_prerelease }}
        
    - name: 📤 Upload Release Assets
      run: |
        echo "📤 Uploading release assets..."
        
        # Upload ZIP archive
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Content-Type: application/zip" \
             --data-binary @"psychopism-website-${{ steps.get_version.outputs.tag_name }}.zip" \
             "${{ steps.create_release.outputs.upload_url }}?name=psychopism-website-${{ steps.get_version.outputs.tag_name }}.zip"
        
        # Upload TAR.GZ archive
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Content-Type: application/gzip" \
             --data-binary @"psychopism-website-${{ steps.get_version.outputs.tag_name }}.tar.gz" \
             "${{ steps.create_release.outputs.upload_url }}?name=psychopism-website-${{ steps.get_version.outputs.tag_name }}.tar.gz"
        
        echo "✅ Release assets uploaded successfully!"
        
    - name: 📋 Release Summary
      run: |
        echo "🎉 Release Summary"
        echo "=================="
        echo "🏷️ Tag: ${{ steps.get_version.outputs.tag_name }}"
        echo "🔢 Version: ${{ steps.get_version.outputs.version }}"
        echo "🆕 Pre-release: ${{ steps.get_version.outputs.is_prerelease }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.tag_name }}"
        echo "📅 Created: $(date)"
        echo ""
        echo "🎮 Psychopism Website ${{ steps.get_version.outputs.tag_name }} is now available!"
        echo "🌍 Visit: https://psychopism.game"
        echo "📦 Download: https://github.com/${{ github.repository }}/releases/latest"

  # Deploy release to GitHub Pages
  deploy-release:
    runs-on: ubuntu-latest
    needs: create-release
    if: "!contains(needs.create-release.outputs.tag_name, '-')"
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔍 Install TypeScript
      run: npm install -g typescript
      
    - name: 🏠 Build for Production
      run: |
        chmod +x ./build.sh
        ./build.sh
        
    - name: 📄 Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 🗂️ Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: 🌍 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 🎉 Deployment Success
      run: |
        echo "🎉 Production deployment completed!"
        echo "🌍 Live URL: ${{ steps.deployment.outputs.page_url }}"
        echo "🏷️ Version: ${{ needs.create-release.outputs.tag_name }}"
        echo "📅 Deployed: $(date)"

