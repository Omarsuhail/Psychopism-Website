name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for analysis
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔍 Install TypeScript
      run: npm install -g typescript
      
    - name: 📈 PR Analysis
      run: |
        echo "🔍 Pull Request Analysis:"
        echo "🏷️ PR Title: ${{ github.event.pull_request.title }}"
        echo "👤 Author: ${{ github.event.pull_request.user.login }}"
        echo "🌱 Base Branch: ${{ github.event.pull_request.base.ref }}"
        echo "🔀 Head Branch: ${{ github.event.pull_request.head.ref }}"
        echo "📅 Created: ${{ github.event.pull_request.created_at }}"
        
        # Count changed files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
        echo "📋 Changed files: $CHANGED_FILES"
        
        # Show changed files by type
        echo "📁 Changed files by type:"
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(ts|js)$' | wc -l | xargs echo "TypeScript/JavaScript:"
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(css|scss)$' | wc -l | xargs echo "Stylesheets:"
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(md|txt)$' | wc -l | xargs echo "Documentation:"
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(yml|yaml|json)$' | wc -l | xargs echo "Configuration:"
        
    - name: ✅ Type Check
      run: npm run typecheck
      
    - name: 🏠 Build Test
      run: |
        chmod +x ./build.sh
        ./build.sh
        
    - name: 🔍 Code Quality Analysis
      run: |
        echo "🕵️ Code Quality Analysis:"
        
        # Count lines of code changes
        ADDED_LINES=$(git diff --numstat origin/${{ github.event.pull_request.base.ref }}...HEAD | awk '{sum+=$1} END {print sum+0}')
        REMOVED_LINES=$(git diff --numstat origin/${{ github.event.pull_request.base.ref }}...HEAD | awk '{sum+=$2} END {print sum+0}')
        
        echo "📈 Lines added: $ADDED_LINES"
        echo "📉 Lines removed: $REMOVED_LINES"
        echo "🔄 Net change: $((ADDED_LINES - REMOVED_LINES))"
        
        # Check for large files
        echo "📁 Large file check:"
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | xargs -I {} sh -c 'wc -l "{}" 2>/dev/null || echo "0 {}"' | awk '$1 > 500 {print "⚠️ Large file: " $2 " (" $1 " lines)"}'
        
        # Check for TODO/FIXME comments
        echo "📝 TODO/FIXME analysis:"
        git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^\+.*\b(TODO|FIXME|XXX|HACK)\b' | wc -l | xargs echo "New TODO/FIXME comments:"
        
    - name: 📄 Documentation Check
      run: |
        echo "📚 Documentation analysis:"
        
        # Check if README was updated for significant changes
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
        README_CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -c 'README.md' || echo "0")
        
        if [ $CHANGED_FILES -gt 10 ] && [ $README_CHANGED -eq 0 ]; then
          echo "⚠️ Large PR ($CHANGED_FILES files) but README.md not updated"
          echo "📝 Consider updating documentation for significant changes"
        else
          echo "✅ Documentation status: OK"
        fi
        
        # Check for missing comments in new TypeScript files
        NEW_TS_FILES=$(git diff --name-only --diff-filter=A origin/${{ github.event.pull_request.base.ref }}...HEAD | grep '\.ts$' || true)
        if [ -n "$NEW_TS_FILES" ]; then
          echo "🆕 New TypeScript files detected:"
          echo "$NEW_TS_FILES"
        fi
        
    - name: 🔒 Security Check
      run: |
        echo "🔒 Security analysis for PR:"
        
        # Check for potential security issues in changed files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
        
        # Check for hardcoded secrets in changes
        if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -iE '(password|secret|token|api_?key)\s*[:=]\s*["\'][^"\']' > /dev/null; then
          echo "⚠️ Potential hardcoded secrets detected in PR changes!"
          echo "📝 Please review the changes and ensure no secrets are committed"
        else
          echo "✅ No obvious hardcoded secrets detected"
        fi
        
        # Check for new dependencies
        if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD package.json | grep -E '^\+.*".*":\s*"' > /dev/null; then
          echo "📦 New dependencies detected in package.json:"
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD package.json | grep -E '^\+.*".*":\s*"' | sed 's/^+/  -/'
          echo "🔍 Please ensure these dependencies are secure and necessary"
        fi
        
    - name: 📋 Generate PR Report
      if: always()
      run: |
        echo "📋 Pull Request Validation Report"
        echo "======================================"
        echo "📅 Date: $(date)"
        echo "🔍 PR: #${{ github.event.pull_request.number }}"
        echo "🏷️ Title: ${{ github.event.pull_request.title }}"
        echo "👤 Author: ${{ github.event.pull_request.user.login }}"
        echo "🔄 Status: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)"
        echo "📈 Validation completed successfully"
        
        # Size assessment
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
        if [ $CHANGED_FILES -le 5 ]; then
          echo "🟢 PR Size: Small ($CHANGED_FILES files) - Easy to review"
        elif [ $CHANGED_FILES -le 15 ]; then
          echo "🟡 PR Size: Medium ($CHANGED_FILES files) - Moderate review time"
        else
          echo "🔴 PR Size: Large ($CHANGED_FILES files) - Consider breaking down"
        fi

  # Build verification job
  build-verification:
    runs-on: ubuntu-latest
    needs: validate-pr
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: 🔍 Install TypeScript
      run: npm install -g typescript
      
    - name: 🏠 Build with Node.js ${{ matrix.node-version }}
      run: |
        echo "📍 Testing build compatibility with Node.js ${{ matrix.node-version }}"
        chmod +x ./build.sh
        ./build.sh
        
    - name: ✅ Verify Build Output
      run: |
        echo "🔍 Build verification for Node.js ${{ matrix.node-version }}:"
        if [ -d "dist" ] && [ -f "dist/main.js" ]; then
          echo "✅ Build successful with Node.js ${{ matrix.node-version }}"
          ls -la dist/main.*
        else
          echo "❌ Build failed with Node.js ${{ matrix.node-version }}"
          exit 1
        fi

